// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Next from "../bindings/Next.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as CodeExample from "./CodeExample.js";
import Dynamic from "next/dynamic";

function PlaygroundWidget(Props) {
  var initialCodeOpt = Props.initialCode;
  var heightOpt = Props.height;
  var initialCode = initialCodeOpt !== undefined ? initialCodeOpt : "";
  var height = heightOpt !== undefined ? heightOpt : "10rem";
  var match = React.useState(function () {
        return /* Init */0;
      });
  var setState = match[1];
  var editorCode = React.useRef(initialCode);
  var typingTimer = React.useRef(undefined);
  var timeoutCompile = React.useRef(function (param) {
        
      });
  var codeMirrorComponent = Dynamic((function (param) {
          return import("src/components/CodeMirror.js").then(function (m) {
                      return m.make;
                    });
        }), Next.Dynamic.options(false, (function (param) {
              return React.createElement(CodeExample.make, {
                          code: "Loading compiler...",
                          showLabel: false,
                          lang: "text"
                        });
            }), undefined));
  var codeMirrorEl = React.createElement(codeMirrorComponent, {
        errors: [],
        minHeight: height,
        maxHeight: height,
        className: "w-full py-4",
        onChange: (function (value) {
            editorCode.current = value;
            var timer = typingTimer.current;
            if (timer !== undefined) {
              clearTimeout(Caml_option.valFromOption(timer));
            }
            var timer$1 = setTimeout((function (param) {
                    Curry._1(timeoutCompile.current, undefined);
                    typingTimer.current = undefined;
                    
                  }), 100);
            typingTimer.current = Caml_option.some(timer$1);
            
          }),
        value: editorCode.current,
        mode: "reason"
      });
  return React.createElement("div", undefined, React.createElement("div", {
                  style: {
                    height: height
                  }
                }, match[0] ? codeMirrorEl : React.createElement("div", undefined, React.createElement(CodeExample.make, {
                            code: initialCode,
                            showLabel: false,
                            lang: "res"
                          }), React.createElement("button", {
                            onClick: (function (evt) {
                                return Curry._1(setState, (function (param) {
                                              return /* Edit */1;
                                            }));
                              })
                          }, "Edit"))));
}

var make = PlaygroundWidget;

export {
  make ,
  
}
/* Next Not a pure module */
